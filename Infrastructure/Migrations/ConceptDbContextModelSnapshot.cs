// <auto-generated />
using System;
using iconcept.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace iconcept.Migrations
{
    [DbContext(typeof(ConceptDbContext))]
    partial class ConceptDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConceptTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NorwegianDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TermId");

                    b.ToTable("ConceptTranslations");
                });

            modelBuilder.Entity("ConceptTranslationCountry", b =>
                {
                    b.Property<int>("ConceptTranslationsId")
                        .HasColumnType("int");

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.HasKey("ConceptTranslationsId", "CountriesId");

                    b.HasIndex("CountriesId");

                    b.ToTable("ConceptTranslationCountry");
                });

            modelBuilder.Entity("ConceptTranslationFeeling", b =>
                {
                    b.Property<int>("ConceptTranslationsId")
                        .HasColumnType("int");

                    b.Property<int>("FeelingsId")
                        .HasColumnType("int");

                    b.HasKey("ConceptTranslationsId", "FeelingsId");

                    b.HasIndex("FeelingsId");

                    b.ToTable("ConceptTranslationFeeling");
                });

            modelBuilder.Entity("ConceptTranslationRegion", b =>
                {
                    b.Property<int>("ConceptTranslationsId")
                        .HasColumnType("int");

                    b.Property<int>("RegionsId")
                        .HasColumnType("int");

                    b.HasKey("ConceptTranslationsId", "RegionsId");

                    b.HasIndex("RegionsId");

                    b.ToTable("ConceptTranslationRegion");
                });

            modelBuilder.Entity("ConceptTranslationReligion", b =>
                {
                    b.Property<int>("ConceptTranslationsId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionsId")
                        .HasColumnType("int");

                    b.HasKey("ConceptTranslationsId", "ReligionsId");

                    b.HasIndex("ReligionsId");

                    b.ToTable("ConceptTranslationReligion");
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("iconcept.Models.Term.Feeling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FeelingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feelings");
                });

            modelBuilder.Entity("iconcept.Models.Term.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("iconcept.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ConceptTranslation", b =>
                {
                    b.HasOne("Term", "Term")
                        .WithMany("ConceptTranslations")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Term");
                });

            modelBuilder.Entity("ConceptTranslationCountry", b =>
                {
                    b.HasOne("ConceptTranslation", null)
                        .WithMany()
                        .HasForeignKey("ConceptTranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConceptTranslationFeeling", b =>
                {
                    b.HasOne("ConceptTranslation", null)
                        .WithMany()
                        .HasForeignKey("ConceptTranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iconcept.Models.Term.Feeling", null)
                        .WithMany()
                        .HasForeignKey("FeelingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConceptTranslationRegion", b =>
                {
                    b.HasOne("ConceptTranslation", null)
                        .WithMany()
                        .HasForeignKey("ConceptTranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iconcept.Models.Term.Region", null)
                        .WithMany()
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConceptTranslationReligion", b =>
                {
                    b.HasOne("ConceptTranslation", null)
                        .WithMany()
                        .HasForeignKey("ConceptTranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Religion", null)
                        .WithMany()
                        .HasForeignKey("ReligionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.HasOne("iconcept.Models.Term.Region", "RegionName")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId");

                    b.Navigation("RegionName");
                });

            modelBuilder.Entity("Term", b =>
                {
                    b.Navigation("ConceptTranslations");
                });

            modelBuilder.Entity("iconcept.Models.Term.Region", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
